{% from 'swagger/macros.yaml' import security, error_definition, responses %}
swagger: '2.0'
info:
  version: 1.0.0
  title: Study Association via
  description: The public API of the study association via of the University of Amsterdam
  license:
    name: MIT
  contact:
    name: ICT committee
    url: https://svia.nl
    email: ict@svia.nl

basePath: "/api/pimpy"
schemes:
  - "{{protocol}}"
produces:
  - application/json
consumes:
  - application/json

tags:
  - name: tasks
    description: Operations related to pimpy tasks.
  - name: minutes
    description: Operations related to pimpy minutes.

paths:
  /tasks/:
    get:
      summary: List all tasks for the current user.
      parameters:
        - name: groupId
          in: query
          type: integer
          description: Filter by a groupId
      responses:
        200:
          description: Successfull response
          schema:
            $ref: '#/definitions/PimpyTaskList'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'

      security:
        - OAuth2Implicit: [pimpy_read]
      tags:
       - tasks

    post:
      summary: Create a new task.
      parameters:
        - name: task
          in: body
          required: true
          description: task
          schema:
            $ref: '#/definitions/PimpyTask'
      responses:
        201:
          description: Successfull create
          schema:
            $ref: '#definitions/PimpyTask'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_write]
      tags:
        - tasks

  /tasks/{taskId}/:
    get:
      summary: Retrieve a task
      parameters:
        - name: taskId
          in: path
          type: integer
          required: true
      responses:
        200:
          description: The requested task
          schema:
            $ref: '#/definitions/PimpyTask'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_read]
      tags:
        - tasks
    put:
      summary: Put a new version of the task
      parameters:
        - name: taskId
          in: path
          type: integer
          required: true
        - name: task
          in: body
          schema:
            $ref: '#/definitions/PimpyTask'
      responses:
        204:
          description: Updated, no response
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_write]
      tags:
        - tasks

  /minutes/:
    get:
      summary: List all minutes for the current user.
      parameters:
        - name: groupId
          in: query
          type: integer
          description: Filter by a groupId
      responses:
        200:
          description: Successfull response
          schema:
            $ref: '#/definitions/PimpyMinuteList'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_read]
      tags:
       - minutes

    post:
      summary: Create a new minute.
      parameters:
        - name: task
          in: body
          required: true
          description: task
          schema:
            $ref: '#/definitions/PimpyMinute'
      responses:
        201:
          description: Successfull create
          schema:
            $ref: '#definitions/PimpyMinute'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_write]
      tags:
        - minutes

  /minutes/{minuteId}/:
    get:
      summary: Retrieve a minute
      parameters:
        - name: minuteId
          in: path
          type: integer
          required: true
      responses:
        204:
          description: Updated, no response
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_read]
      tags:
        - minutes

    put:
      summary: Put a new version of the minute
      parameters:
        - name: minuteId
          in: path
          type: integer
          required: true
        - name: minute
          in: body
          schema:
            $ref: '#/definitions/PimpyMinute'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/PimpyMinute'
        400:
          $ref: '#/responses/ValidationError'
        401:
          $ref: '#/responses/Unauthorized'
        404:
          $ref: '#/responses/ResourceNotFound'
        500:
          $ref: '#/responses/InternalServerError'
      security:
        - OAuth2Implicit: [pimpy_write]
      tags:
        - minutes

{{ responses() }}

definitions:
  PimpyTaskStatus:
    type: string
    enum:
      - new
      - started
      - done      # Marked done by user
      - remove    # Marked for removal by user
      - finished  # DONE in minute
      - deleted   # REMOVE in minute

  PimpyTaskBase:
    required:
      - groupId
      - title
      - status
    properties:
      title:
        type: string
      groupId:
        type: integer
      taskId:
        type: integer
        description: Unique identifier used in request paths.
        readOnly: true
      status:
        $ref: '#/definitions/PimpyTaskStatus'

  PimpyTask:
    allOf:
      - $ref: '#/definitions/PimpyTaskBase'
      - type: object
        required:
          - userIds
        properties:
          userIds:
            type: array
            items:
              type: integer
          content:
            type: string
          minuteId:
            type: integer
          line:
            type: integer
            description: line of the minute the task was defined on.
          taskB32Id:
            type: string
            description: Base 32 encoded unique identifier, used to display to end user.
            readOnly: true

  PimpyTaskList:
    type: array
    items:
      $ref: "#/definitions/PimpyTaskBase"

  PimpyMinuteMinimal:
    type: object
    required:
      - groupId
      - minuteDate
    properties:
      groupId:
        type: integer
      minuteDate:
        type: string
        format: date
      minuteId:
        type: integer
        description: Unique identifier used in request paths.
        readOnly: true

  PimpyMinute:
    allOf:
    - $ref: "#/definitions/PimpyMinuteMinimal"
    - type: object
      required:
        - content
      properties:
        content:
          type: string

  PimpyMinuteList:
    type: array
    items:
      $ref: "#/definitions/PimpyMinuteMinimal"
{{ error_definition() }}

{% call security() -%}
      pimpy_read: "Read access to your Pimpy data"
      pimpy_write: "Write access to your Pimpy data"
{%- endcall %}
# vim: sw=2 ts=2