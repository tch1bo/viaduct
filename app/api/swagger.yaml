swagger: '2.0'
info:
  version: 1.0.0
  title: Study Association via
  description: The public API of the study association via of the University of Amsterdam
  license:
    name: MIT
  contact:
    name: ICT committee
    url: https://svia.nl
    email: ict@svia.nl

host: "svia.nl"
basePath: "/api/"
schemes:
  - "https"
produces:
  - application/json
consumes:
  - application/json


paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets

      responses:
        '200':
          description: An paged array of pets

definitions:
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: integer
        minimum: 100
        maximum: 600
  ExtendedErrorModel:
    allOf:
    - $ref: '#/definitions/ErrorModel'
    - type: object
      required:
      - rootCause
      properties:
        rootCause:
          type: string
  Error:
    type: object
    description: Generic error response, modelled after RFC 7807.
    properties:
      code:
        type: integer
        description: Error code within the system.
      title:
        type: string
        description: This title is not meant to be shown to users. Please use the code to parse the error.
      detail:
        type: string
        description: Error details, to help developers detect what went wrong.
    required:
      - code
      - title

  PimpyTaskStatus:
    type: string
    enum:
      - new
      - started
      - done      # Marked done by user
      - remove    # Marked for removal by user
      - finished  # DONE in minute
      - deleted   # REMOVE in minute

  PimpyTaskMinimal:
    type: object
    required:
      - taskId
      - groupId
      - title
      - status
    properties:
      taskId:
        type: integer
        description: Unique identifier used in request paths.
      title:
        type: string
      groupId:
        type: integer
      status:
        $ref: '#/definitions/PimpyTaskStatus'

  PimpyTask:
    allOf:
      - $ref: '#/definitions/PimpyTaskMinimal'
      - type: object
        required:
          - content
        properties:
          content:
            type: string
          minuteId:
            type: integer
          line:
            type: integer
            description: line of the minute the task was defined on.

  PimpyTaskList:
    type: array
    items:
      $ref: "#/definitions/PimpyTaskMinimal"

  PimpyMinuteMinimal:
    type: object
    required:
      - minuteId
      - groupId
      - minuteDate
    properties:
      minuteId:
        type: integer
        description: Unique identifier used in request paths.
      groupId:
        type: integer
      minuteDate:
        type: string
        format: date

  PimpyMinute:
    type: object
    required:
      - minuteId
      - groupId
      - minuteDate
      - content
    properties:
      minuteId:
        type: integer
        description: Unique identifier used in request paths.
      groupId:
        type: integer
      minuteDate:
        type: string
        format: date
      content:
        type: string

  PimpyMinute2:
    allOf:
    - $ref: "#/definitions/PimpyMinuteMinimal"
    - type: object
      required:
        - content
      properties:
        content:
          type: string

  PimpyMinuteList:
    type: array
    items:
      $ref: "#/definitions/PimpyMinuteMinimal"

securityDefinitions:
  OAuth2AccessCode:
    type: oauth2
    description: >-
      The API uses OAuth2 to grant access, for more information see the
      explicit documentation [here](https://svia.nl/oauth2/)
    flow: accessCode
    authorizationUrl: "https://svia.nl/oauth/authorize"
    tokenUrl: "https://svia.nl/oauth/token"
    scopes:
      pimpy: pimpy data
  OAuth2Implicit:
    type: oauth2
    description: >-
      The API uses OAuth2 to grant access, for more information see the
      explicit documentation [here](https://svia.nl/oauth2/)
    flow: implicit
    authorizationUrl: "https://svia.nl/oauth/authorize"
    scopes:
      pimpy: pimpy data
  OAuth2ClientCredentials:
    type: oauth2
    description: >-
      The API uses OAuth2 to grant access, for more information see the
      explicit documentation [here](https://svia.nl/oauth2/)
    flow: application
    tokenUrl: "https://svia.nl/oauth/token"
    scopes:
      pimpy: pimpy data
  OAuth2Password:
    type: oauth2
    description: >-
      The API uses OAuth2 to grant access, for more information see the
      explicit documentation [here](https://svia.nl/oauth2/)
    flow: password
    tokenUrl: "https://svia.nl/oauth/token"
    scopes:
      pimpy: pimpy data



      # implicit:
      #   authorizationUrl: 'https://svia.nl/oauth/authorize'
      #   scopes:
      #     pimpy: access to pimpy
      # authorizationCode:
      #   authorizationUrl: 'https://svia.nl/oauth/authorize'
      #   tokenUrl: 'https://svia.nl/oauth/token'
      #   scopes:
      #     pimpy: access to pimpy
      # password:
      #   tokenUrl: 'https://svia.nl/oauth/token'
      #   scopes:
      #     pimpy: access to pimpy
      # clientCredentials:
      #   tokenUrl: 'https://svia.nl/oauth2/token/'
      #   scopes:
      #     pimpy: access to pimpy
      #
  # schemas:
  #   Pet:
  #     required:
  #       - id
  #       - name
  #     properties:
  #       id:
  #         type: integer
  #         format: int64
  #       name:
  #         type: string
  #       tag:
  #         type: string
  #   Pets:
  #     type: array
  #     items:
  #       $ref: '#/components/schemas/Pet'
  #   Error:
  #     required:
  #       - code
  #       - message
  #     properties:
  #       code:
  #         type: integer
  #         format: int32
  #       message:
  #         type: string

          # vim: sw=2 ts=2
