"""Add avatar file id to user.

Revision ID: fe6ff06f1f5b
Revises: 1f4385bac8f9
Create Date: 2018-03-30 21:46:07.421190

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship

import re
import glob

from app import hashfs
from app.models.base_model import BaseEntity
from app.enums import FileCategory

# revision identifiers, used by Alembic.
revision = 'fe6ff06f1f5b'
down_revision = '1f4385bac8f9'

Base = declarative_base()
db = sa
db.Model = Base
db.relationship = relationship


filename_regex = re.compile(r'.+/avatar_(\d+)\.+(.+)')


class File(db.Model, BaseEntity):
    __tablename__ = 'file'

    hash = db.Column(db.String(200), nullable=False)
    extension = db.Column(db.String(20), nullable=False)

    category = db.Column(db.Enum(FileCategory, name='file_category'),
                         nullable=False)
    display_name = db.Column(db.String(200))


class User(db.Model, BaseEntity):
    __tablename__ = 'user'

    avatar_file_id = db.Column(db.Integer, db.ForeignKey('file.id'))
    avatar_file = db.relationship(File, foreign_keys=[avatar_file_id],
                                  lazy='joined')


def migrate_files():
    print("Migrating all avatars to HashFS")

    pattern = 'app/static/files/users/avatar_*'

    avatars = glob.glob(pattern)
    total = len(avatars)
    stepsize = 10

    for i, avatar in enumerate(avatars):
        if (i + 1) % stepsize == 0:
            print("{}/{}".format(i + 1, total))

        m = filename_regex.match(avatar)
        if not m:
            print("Filename does not have correct format:", avatar)
            continue

        user_id = int(m.group(1))
        extension = m.group(2)

        user = db.session.query(User).get(user_id)
        if user is None:
            continue

        with open(avatar, 'rb') as file_reader:
            address = hashfs.put(file_reader)

        f = File()
        f.category = FileCategory.USER_AVATAR
        f.hash = address.id
        f.extension = extension

        user.avatar_file = f

        db.session.add(f)

    db.session.commit()


def create_session():
    connection = op.get_bind()
    session_maker = sa.orm.sessionmaker()
    session = session_maker(bind=connection)
    db.session = session


def upgrade():
    create_session()

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('avatar_file_id', sa.Integer(), nullable=True))
    op.create_foreign_key(op.f('fk_user_avatar_file_id_file'), 'user', 'file', ['avatar_file_id'], ['id'])

    try:
        migrate_files()
    except:
        downgrade()
        raise
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    raise Exception("Undoing this migration is impossible")

    # op.drop_constraint(op.f('fk_user_avatar_file_id_file'), 'user', type_='foreignkey')
    # op.drop_column('user', 'avatar_file_id')
    # ### end Alembic commands ###


# vim: ft=python
